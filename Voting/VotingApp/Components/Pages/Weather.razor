@* @page "/voting-app"
@using Microsoft.AspNetCore.SignalR
@using VotingApp.Services
@inject SignalRService VotingService
@implements IAsyncDisposable
@attribute [StreamRendering]
@rendermode InteractiveServer

<h3>Voting Application</h3>

@if (VotingService.IsConnected)
{
    <p>Status: Connected</p>
    <p>Your Session ID: @VotingService.CurrentSessionId</p>
    @if (VotingService.CurrentCabinNumber.HasValue)
    {
        <p>You are voting from Cabin: @VotingService.CurrentCabinNumber</p>
        <button class="btn btn-primary" @onclick="HandleUnlockApp">Request Unlock (My Cabin)</button>
    }
    else
    {
        <p>Cabin number not yet assigned or registration failed.</p>
    }
}
else
{
    <p>Status: Disconnected or Connecting...</p>
    @if (!string.IsNullOrEmpty(initializationError))
    {
        <p style="color: red;">Error: @initializationError</p>
    }
}

@if (!string.IsNullOrEmpty(unlockMessage))
{
    <p style="color: green;">@unlockMessage</p>
}

<hr />
<div>
    <h4>Simulate User ID:</h4>
    <input @bind="userId" placeholder="Enter User ID" />
</div>


@code {
    private string userId = "user"; // Example User ID
    private string? initializationError;
    private string? unlockMessage;

    protected override async Task OnInitializedAsync()
    {
        VotingService.OnAppUnlocked += HandleAppUnlockedFromServer;
        VotingService.OnConnectionStateChanged += StateHasChanged; // Re-render on connection state changes
        await ConnectAndRegister();
        StateHasChanged();
    }

    private async Task ConnectAndRegister()
    {
        if (string.IsNullOrWhiteSpace(userId))
        {            initializationError = "User ID cannot be empty.";

            return;
        }

        initializationError = null; // Clear previous errors
        try
        {
            await VotingService.InitializeAsync(userId);
        }
        catch (HubException hex)
        {
            initializationError = $"Failed to register: {hex.Message}";
        }
        catch (Exception ex)
        {
            initializationError = $"An error occurred: {ex.Message}";
        }
        StateHasChanged(); // Ensure UI updates
    }

    private async Task HandleUnlockApp()
    {
        if (VotingService.CurrentCabinNumber.HasValue && !string.IsNullOrEmpty(userId))
        {
            unlockMessage = ""; 
            await VotingService.RequestUnlockAppAsync(userId, VotingService.CurrentCabinNumber.Value.ToString());
        }
    }

    private void HandleAppUnlockedFromServer(string unlockedUserId, string unlockedCabin)
    {
        // This event is raised when ANY app is unlocked.
        unlockMessage = $"Event: App unlocked for User '{unlockedUserId}' in Cabin '{unlockedCabin}'.";
        InvokeAsync(StateHasChanged); 
    }

    public async ValueTask DisposeAsync()
    {
        VotingService.OnAppUnlocked -= HandleAppUnlockedFromServer;
        VotingService.OnConnectionStateChanged -= StateHasChanged;

    }
} *@