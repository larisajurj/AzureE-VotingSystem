@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime


<PageTitle>Home</PageTitle>
<div class="content">
    <div class="card">
        <div class="card-header">
            <h1>Hello, world!</h1>
        </div>
        <div class="card-body">
            Welcome to your new app.
            <h3>Your assigned cabin: @assignedCabin</h3>

        </div>
    </div>
</div>

@code {
    private HubConnection hubConnection;
    private string sessionId;
    private int assignedCabin;
    private string userId = "user123"; // replace with real user ID
    private bool initialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !initialized)
        {
            initialized = true;

            // Now JS interop is safe
            sessionId = await JSRuntime.InvokeAsync<string>("getOrCreateSessionId");

            hubConnection = new HubConnectionBuilder()
                .WithUrl("http://localhost:5062/voting")
                .WithAutomaticReconnect()
                .Build();

            hubConnection.On<string, int>("UnlockApp", (userId, cabin) =>
            {
                // handle signal
            });

            await hubConnection.StartAsync();

            try
            {
                assignedCabin = await hubConnection.InvokeAsync<int>("RegisterSession", userId, sessionId);
                Console.WriteLine($"Assigned cabin: {assignedCabin}");

            }
            catch (Exception ex)
            {
                Console.WriteLine("Rejected: " + ex.Message);
                // Show error UI or redirect
            }

            StateHasChanged();
        }
    }
}
