@page "/"
@using BlazorCircuitHandler.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Server.Circuits
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using VotingApp.Factories
@using VotingApp.Models
@using VotingApp.Services
@using VotingApp.Services.Abstractions

@attribute [StreamRendering]
@rendermode InteractiveServer
@inject AuthenticationStateProvider authStateProvider
@inject IUserOnlineServiceFactory UserOnlineServiceFactory
@inject CircuitHandlerService CircuitHandlerService
@inject SignalRService VotingService
@inject IPollingStationClient PollingStationClient

@initializationError

@if (IsLocked || IsUnlocking)
{
    <div class="locked-screen text-center @(IsUnlocking ? "unlocking" : "")">
        <div class="padlock-icon">
            <span class="polling-station-icon fa-solid fa-lock" style="user-select: none;"></span>
        </div>

        <h2 style="user-select: none;">Această cabină este blocată</h2>
        <p style="user-select: none;" >Este necesară intervenția unui membru a comisiei pentru a putea vota.</p>

    </div>
}
else
{
    <div class="content">
        <div class="card">
            <div class="card-header">
                <h1>You can vote!</h1>
            </div>
            <div class="card-body">
                <p>Your Session ID: @CircuitHandlerService.CircuitId</p>
            </div>
        </div>
    </div>
}

@code {
    private HubConnection? _hubConnection;
    private string? _sessionId;
    private string? _pollingStationId; 
    private string _assignedCabin = string.Empty;
    private Booth? booth;
    private bool _isConnected = false;
    private string? initializationError;
    private bool IsLocked = true;
    private bool IsUnlocking = false;
    private IUserOnlineService UserOnlineService;

    protected override async Task OnInitializedAsync()
    {
        VotingService.OnAppUnlocked += HandleAppUnlockedFromServer;
        VotingService.OnConnectionStateChanged += UpdateConnectionState;
        _sessionId = CircuitHandlerService.CircuitId;
        if (string.IsNullOrEmpty(_sessionId))
        {
            Console.WriteLine("Session ID not available immediately in OnInitializedAsync.");
            return;
        }
        var state = await authStateProvider.GetAuthenticationStateAsync();
        var user = state.User;
        PollingStationClient.SetUser(user);
        var oid = user.FindFirst("oid")?.Value;

        if (!string.IsNullOrEmpty(oid))
        {
            UserOnlineService = UserOnlineServiceFactory.GetOrCreate(oid);
            _pollingStationId = UserOnlineService.PollingStation?.Id;
            Console.WriteLine($"Home using UserOnlineService [{UserOnlineService.InstanceId}]");
        }
        await ConnectAndRegister();
    }

    private async Task ConnectAndRegister()
    {
        if (string.IsNullOrEmpty(_sessionId))
        {
            initializationError = "Circuit/Session ID is not available to connect.";
            _isConnected = false;
            StateHasChanged();
            return;
        }
        Console.WriteLine($"Home using UserOnlineService [{UserOnlineService.InstanceId}]");
        Console.WriteLine("Start waiting");
        await UserOnlineService.InitializationComplete.Task;
        _pollingStationId = UserOnlineService.PollingStation?.Id;
        var state = await authStateProvider.GetAuthenticationStateAsync();
        var user = state.User;
        Console.WriteLine("Stop waiting");
        try
        {
            initializationError = null; // Clear previous errors
            // InitializeAsync will handle connection and initial registration
            // It should return the assigned cabin or an indicator of success/failure
            string? cabin = await VotingService.InitializeAndRegisterAsync(_pollingStationId, _sessionId, user);

            if (!string.IsNullOrEmpty(cabin) && !cabin.StartsWith("Error:"))
            {
                _assignedCabin = cabin;
                var cabinNr = Int32.Parse(cabin);
                booth = await PollingStationClient?.GetBoothById(_pollingStationId, cabinNr);
                IsLocked = booth?.Status == "locked";
                //UserOnlineService.Connect(_sessionId, _assignedCabin); 
                Console.WriteLine($"Component: Registered session {_sessionId}, Polling Station: {_pollingStationId}, Got Cabin: {_assignedCabin}");
            }
            else
            {
                _assignedCabin = string.Empty; // Or cabin if it contains the error message
                initializationError = $"Failed to register with SignalR service: {cabin ?? "Unknown error"}";
                Console.WriteLine(initializationError);
            }
        }
        catch (Exception ex) // Catch exceptions from InitializeAndRegisterAsync
        {
            initializationError = $"An error occurred during initialization: {ex.Message}";
            _assignedCabin = string.Empty;
            Console.WriteLine($"Component: Initialization error: {ex.Message}");
        }
        _isConnected = VotingService.IsConnected; // Update based on service state
        StateHasChanged(); // Ensure UI updates
    }

    private void UpdateConnectionState()
    {
        _isConnected = VotingService.IsConnected;
        if (!_isConnected && string.IsNullOrEmpty(initializationError)) // If disconnected not due to initial error
        {
            _assignedCabin = string.Empty; // Clear cabin on disconnect
            // Optionally: display a "disconnected" message or try to reconnect via UI
        }
        InvokeAsync(StateHasChanged);
    }

    private async Task StartConnection()
    {
        try
        {
            await _hubConnection.StartAsync();
            _isConnected = true;
            Console.WriteLine("Connection started");
            await RegisterMySession();

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting connection: {ex.Message}");
            _isConnected = false;
        }
    }

    private async Task RegisterMySession()
    {
        try
        {
            if (string.IsNullOrEmpty(_pollingStationId) && string.IsNullOrEmpty(_assignedCabin) && string.IsNullOrEmpty(_sessionId))
            {
                var state = await authStateProvider.GetAuthenticationStateAsync();
                var user = state.User;
                await VotingService.InitializeAndRegisterAsync(_pollingStationId, _assignedCabin, user);
                //UserOnlineService.Connect(_sessionId, _assignedCabin);
                Console.WriteLine($"Registered session {_sessionId} and got booth number: {_assignedCabin}");
            }else
            {
                Console.WriteLine("Not enough data to register session");
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error calling RegisterSession: {ex.Message}");
            _assignedCabin = "Error: " + ex.Message;
            StateHasChanged();
        }
    }


    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            try
            {
                await _hubConnection.StopAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error stopping connection: {ex.Message}");
            }
            await _hubConnection.DisposeAsync();
        }
    }

    private async void HandleAppUnlockedFromServer(string unlockedPollingStation, string unlockedCabin)
    {
        try
        {// This event is raised when ANY app is unlocked.
            var cabinNr = Int32.Parse(_assignedCabin);
            booth = await PollingStationClient?.GetBoothById(_pollingStationId, cabinNr);
            if (unlockedPollingStation == _pollingStationId && unlockedCabin == booth?.Id.ToString() && booth.Status == "unlocked")
            {
                IsUnlocking = true;
                await InvokeAsync(StateHasChanged);

                await Task.Delay(1000); // let animation play
                IsLocked = false;
                IsUnlocking = false;
                await InvokeAsync(StateHasChanged);
            }
        }catch(Exception ex)
        {
            Console.WriteLine($"Error handling app unlocked: {ex.Message}");

        }
        await InvokeAsync(StateHasChanged);
    }

}
