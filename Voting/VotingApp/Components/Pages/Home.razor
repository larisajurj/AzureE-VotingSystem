@page "/"
@using BlazorCircuitHandler.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Server.Circuits
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using VotingApp.Models
@using VotingApp.Services
@using VotingApp.Services.Abstractions

@attribute [StreamRendering]
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserOnlineService UserOnlineService
@inject CircuitHandlerService CircuitHandlerService
@inject SignalRService VotingService
@inject IPollingStationClient PollingStationClient

@initializationError

@if (IsLocked || IsUnlocking)
{
    <div class="locked-screen text-center @(IsUnlocking ? "unlocking" : "")">
        <div class="padlock-icon">
            <i class="polling-station-icon fa-solid fa-lock"></i>
        </div>

        <h2>Această cabină este blocată</h2>
        <p>Este necesară intervenția unui membru a comisiei pentru a putea vota.</p>

    </div>
}
else
{
    <div class="content">
        <div class="card">
            <div class="card-header">
                <h1>You can vote!</h1>
            </div>
            <div class="card-body">
                <p>Your Session ID: @UserOnlineService.CircuitId</p>
            </div>
        </div>
    </div>
}

@code {
    private HubConnection? _hubConnection;
    private string? _sessionId;
    private string _pollingStationId = "2"; 
    private string _assignedCabin = string.Empty;
    private Booth? booth;
    private bool _isConnected = false;
    private string? initializationError;
    private bool IsLocked = true;
    private bool IsUnlocking = false;

    protected override async Task OnInitializedAsync()
    {

        VotingService.OnAppUnlocked += HandleAppUnlockedFromServer;
        VotingService.OnConnectionStateChanged += UpdateConnectionState;
        _sessionId = CircuitHandlerService.CircuitId;
        PollingStationClient.SetUser(new ClaimsPrincipal());
        if (string.IsNullOrEmpty(_sessionId))
        {
            Console.WriteLine("Session ID not available immediately in OnInitializedAsync.");
        }

        await ConnectAndRegister();
    }

    private async Task ConnectAndRegister()
    {
        if (string.IsNullOrEmpty(_sessionId))
        {
            initializationError = "Circuit/Session ID is not available to connect.";
            _isConnected = false;
            StateHasChanged();
            return;
        }

        try
        {
            initializationError = null; // Clear previous errors
            // InitializeAsync will handle connection and initial registration
            // It should return the assigned cabin or an indicator of success/failure
            string? cabin = await VotingService.InitializeAndRegisterAsync(_pollingStationId, _sessionId);

            if (!string.IsNullOrEmpty(cabin) && !cabin.StartsWith("Error:"))
            {
                _assignedCabin = cabin;
                var cabinNr = Int32.Parse(cabin);
                booth = await PollingStationClient?.GetBoothById(_pollingStationId, cabinNr);
                IsLocked = booth?.Status == "locked";
                UserOnlineService.Connect(_sessionId, _assignedCabin, _pollingStationId); // Connect UserOnlineService *after* getting cabin
                Console.WriteLine($"Component: Registered session {_sessionId}, Polling Station: {_pollingStationId}, Got Cabin: {_assignedCabin}");
            }
            else
            {
                _assignedCabin = string.Empty; // Or cabin if it contains the error message
                initializationError = $"Failed to register with SignalR service: {cabin ?? "Unknown error"}";
                Console.WriteLine(initializationError);
            }
        }
        catch (Exception ex) // Catch exceptions from InitializeAndRegisterAsync
        {
            initializationError = $"An error occurred during initialization: {ex.Message}";
            _assignedCabin = string.Empty;
            Console.WriteLine($"Component: Initialization error: {ex.Message}");
        }
        _isConnected = VotingService.IsConnected; // Update based on service state
        StateHasChanged(); // Ensure UI updates
    }

    private void UpdateConnectionState()
    {
        _isConnected = VotingService.IsConnected;
        if (!_isConnected && string.IsNullOrEmpty(initializationError)) // If disconnected not due to initial error
        {
            _assignedCabin = string.Empty; // Clear cabin on disconnect
            // Optionally: display a "disconnected" message or try to reconnect via UI
        }
        InvokeAsync(StateHasChanged);
    }

    private async Task StartConnection()
    {
        try
        {
            await _hubConnection.StartAsync();
            _isConnected = true;
            Console.WriteLine("Connection started");
            await RegisterMySession();

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting connection: {ex.Message}");
            _isConnected = false;
        }
    }

    private async Task RegisterMySession()
    {
        try
        {
            await VotingService.InitializeAndRegisterAsync(_pollingStationId, _assignedCabin);
            UserOnlineService.Connect(_sessionId, _assignedCabin, _pollingStationId);
            Console.WriteLine($"Registered session {_sessionId} and got booth number: {_assignedCabin}");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error calling RegisterSession: {ex.Message}");
            _assignedCabin = "Error: " + ex.Message;
            StateHasChanged();
        }
    }


    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            try
            {
                await _hubConnection.StopAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error stopping connection: {ex.Message}");
            }
            await _hubConnection.DisposeAsync();
        }
    }

    private async void HandleAppUnlockedFromServer(string unlockedPollingStation, string unlockedCabin)
    {
        // This event is raised when ANY app is unlocked.
        var cabinNr = Int32.Parse(_assignedCabin);
        booth = await PollingStationClient?.GetBoothById(_pollingStationId, cabinNr);
        if (unlockedPollingStation == _pollingStationId && unlockedCabin == booth?.Id.ToString() && booth.Status == "unlocked")
        {
            IsUnlocking = true;
            InvokeAsync(StateHasChanged);

            await Task.Delay(1000); // let animation play
            IsLocked = false;
            IsUnlocking = false;
            InvokeAsync(StateHasChanged);
        }
        InvokeAsync(StateHasChanged);
    }

    private async void unlockTest()
    {
        IsUnlocking = true;
        StateHasChanged();

        await Task.Delay(1000); // let animation play
        IsLocked = false;
        IsUnlocking = false;
        StateHasChanged();
    }
}
