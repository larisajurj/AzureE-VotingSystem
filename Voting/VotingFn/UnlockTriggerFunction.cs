using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using Microsoft.Azure.WebJobs.Extensions.SignalRService;
using Microsoft.Azure.Functions.Worker; 
// using Microsoft.Identity.Web; // If you use this for validation

public static class UnlockTriggerFunction
{
    // The SignalRConnectionInfo input binding gives App B the info to connect
    [FunctionName("negotiate")]
    public static SignalRConnectionInfo GetSignalRInfo(
        [HttpTrigger(AuthorizationLevel.Anonymous)] HttpRequest req, 
        [SignalRConnectionInfo(HubName = "votingHub")] SignalRConnectionInfo connectionInfo)
    {
        // connectionInfo is generated by the SignalR Service binding
        // and contains the URL and token App B needs to connect.
        return connectionInfo;
    }

    [FunctionName("TriggerVotingAppUnlock")]
    public static async Task<IActionResult> Run(
        [HttpTrigger(AuthorizationLevel.Anonymous, "post", Route = null)] HttpRequest req, 
        ILogger log)
    {
        log.LogInformation("C# HTTP trigger function processed a request to unlock App B.");

        // --- IMPORTANT: Token Validation ---
        // Azure Functions platform can handle Entra ID validation if configured.
        // The request principal (req.HttpContext.User) should be populated.
        // Check if the user is authenticated
        /*if (req.HttpContext.User?.Identity?.IsAuthenticated != true)
        {
            log.LogWarning("User not authenticated.");
            return new UnauthorizedResult();
        }*/

        // You might want to check specific claims, like the 'appid' or 'aud'
        // string expectedAppId = "your-app-a-client-id";
        // var appidClaim = req.HttpContext.User.FindFirst("http://schemas.microsoft.com/identity/claims/objectidentifier"); // or appid, azp
        // if (appidClaim?.Value != expectedAppId) {
        //     log.LogWarning($"Invalid appid claim: {appidClaim?.Value}");
        //     return new ForbidResult();
        // }
        // --- End Token Validation ---

        log.LogInformation("User authenticated. Sending unlock signal to App B.");

        await signalRMessages.AddAsync(
            new SignalRMessage
            {
                Target = "UnlockAppB", // Method name App B will listen for
                Arguments = new[] { "App A has initiated the unlock." } // Optional arguments
            });

        return new OkObjectResult("Unlock signal sent to App B.");
    }
}