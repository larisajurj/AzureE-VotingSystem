@using PollingStationApp.Models 

<div class="card booth-item-card shadow-sm">
    <img src="@GetBoothImageUrl()" class="card-img-top booth-status-image" alt="Booth Status: @Booth.Status">
    <div class="card-body text-center">
        <h6 class="card-title mb-2">Cabina nr @Booth.Id</h6>
        <p class="card-text small">
            Status: <strong class="@(Booth.Status?.ToLower() == "unlocked" ? "text-success" : "text-danger")">
                @(Booth?.SessionId == null ? "Neînregistrată" : Booth.Status?.ToLower() == "unlocked" ? "Deschisă" : "Închisă")
            </strong>
            <br>
            @if (!string.IsNullOrEmpty(Booth.SessionId))
            {
                <span class="text-muted">Sesiune: @Booth.SessionId</span>
            }
            else
            {
                <span class="text-muted">Sesiune: Liberă</span>
            }
        </p>
        @if (!string.IsNullOrEmpty(Booth.SessionId)) // Only show button if there's a session
        {
            <button class="btn btn-danger" @onclick="HandleDeleteSessionClick" title="Șterge sesiunea asociată">
                <i class="fas fa-trash-alt"></i> Șterge Sesiunea
            </button>
        }
        else
        {
            <button class="btn btn-secondary" disabled title="Nicio sesiune de șters">
                <i class="fas fa-trash-alt"></i> Nicio Sesiune
            </button>
        }
    </div>
</div>


@code {
    [Parameter]
    public Booth Booth { get; set; }

    [Parameter]
    public EventCallback<Booth> OnDeleteSessionClicked { get; set; }
    private string GetBoothImageUrl()
    {
        // Replace these with your actual image URLs or paths
        if (Booth?.SessionId == null)
            return "/assets/unregistered-booth.png";
        if (Booth?.Status?.ToLower() == "locked")
        {
            // Placeholder for a locked booth image
            return "/assets/closed-booth2.png";
        }
        else // Assuming "unlocked" or any other status
        {
            // Placeholder for an unlocked booth image
            return "/assets/open-booth2.png";

        }
    }

    private void HandleActionButtonClick()
    {
        Console.WriteLine(" click");
    }

    private async Task HandleDeleteSessionClick()
    {
        if (Booth != null && OnDeleteSessionClicked.HasDelegate)
        {
            await OnDeleteSessionClicked.InvokeAsync(Booth); // Pass the Voter object back to the parent's handler
        }
        else if (Booth == null)
        {
            Console.WriteLine("BoothCard: HandleDeleteSessionClick called but Booth is null.");
        }
        else
        {
            Console.WriteLine("BoothCard: HandleDeleteSessionClick called but OnDeleteSessionClicked delegate is not set.");
        }
    }
}
