@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client
@using PollingStationApp.Components.Shared
@using PollingStationApp.Data.Helpers.Abstractions
@using PollingStationApp.Models
@using PollingStationApp.Services
@using PollingStationApp.Services.Abstractions
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject ITokenProvider TokenProvider
@inject AuthenticationStateProvider authStateProvider
@inject IConfiguration Configuration
@inject SignalRService signalRService
@inject IUserOnlineService UserOnlineService
@inject IPollingStationClient pollingStationClient

<div class="content">
    @if (isLoading && (pendingRecords == null || pendingRecords.Any() == false))
    {
        <p><em>Așteptare cerere verificare...</em></p>
    }
    else if (currentVotingRecord != null && currentVotingRecord.Voter != null)
    {
        @if (isVoterPopUpVisible)
        {
            <VoterPopUp Voter="currentVotingRecord.Voter"
            OnAllowVotingClicked="OnAllowVotingClicked"
            OnClosePopUp="OnClosePopUp">
            </VoterPopUp>
            <p class="mt-2"><em>Alegător verificat: @currentVotingRecord.Voter.FirstName @currentVotingRecord.Voter.LastName</em></p>
        }

    }
    else if (pendingRecords != null && pendingRecords.Any())
    {
        <div class="pending-voters-section mt-4">
            <h4>Alegători în Așteptare: @pendingRecords.Count() </h4>
            @* Use d-flex for horizontal layout. flex-wrap is optional if you expect 5 items to always fit. *@
            <ul class="list-group d-flex flex-row">
                @foreach (var record in pendingRecords.Take(5)) // Limit to 5 records
                {
                    <li class="list-group-item list-group-item-action me-2 mb-2" style="cursor: pointer;" @onclick="() => HandleRecordClick(record)">
                        @record.Voter.FirstName @record.Voter.LastName
                    </li>
                }
            </ul>
            @if (pendingRecords.Count() > 5)
            {
                <small class="text-muted"><em>Sunt afișați primii 5 din @pendingRecords.Count() alegători în așteptare.</em></small>
            }
        </div>
    }
    else
    {
        <p>Nicio cerere înregistrată sau datele alegătorului nu au putut fi încărcate.</p>
    }
</div>

@code {
    private ClaimsPrincipal? _user;
    private HubConnection? hubConnection;
    private string exc;
    private RegisteredVoter Voter;
    private VotingRecord? currentVotingRecord;
    private bool isLoading = true;
    private bool isVoterPopUpVisible = false;
    private List<VotingRecord>? pendingRecords;

    protected override async Task OnInitializedAsync()
    {
        signalRService.OnVerifyVoterSignalReceived += HandleVerifiedVoterRecordAsync;
        isVoterPopUpVisible = false;

        try
        {
            UserOnlineService.OnChange += OnUserOnlineServiceChanged;
            await UserOnlineService.InitializationComplete.Task;
            if (UserOnlineService.CommitteeMember != null && UserOnlineService.CommitteeMember.Id != null)
                pendingRecords = await pollingStationClient.GetRecordsByStatus(UserOnlineService.CommitteeMember.Id, "Verified");
            var state = await authStateProvider.GetAuthenticationStateAsync();
            var user = state.User;
            if(UserOnlineService.PollingStation != null)
            {
                await signalRService.InitializeAndRegisterAsync(UserOnlineService.PollingStation.Id, user);
            }
        }
        catch (Exception e)
        {
            exc = e.Message;
        }

    }
    public async Task HandleVerifiedVoterRecordAsync(VotingRecord record)
    {
        isVoterPopUpVisible = true;
        isLoading = true;
        currentVotingRecord = null; // Clear previous
        await InvokeAsync(StateHasChanged);


        Console.WriteLine($"Home page: Received OnVerifiedVoterRecord event for VoterId: {record.VoterId}");
        currentVotingRecord = record;

        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnAllowVotingClicked(RegisteredVoter voterBeingAllowed)
    {
        if (UserOnlineService.PollingStation != null && UserOnlineService.PollingStation.Id != null)
        {
            var station = await pollingStationClient.GetStationById(UserOnlineService.PollingStation.Id);
            var emptyBooth = station.Booths.Where(b => b.Status == "locked").FirstOrDefault();
            if (emptyBooth != null && voterBeingAllowed != null && voterBeingAllowed.Id != Guid.Empty)
            {
                exc = "invoked";
                await pollingStationClient.ChangeStatusOfRecord(voterBeingAllowed.Id, "Voted");
                await signalRService.RequestUnlockAppAsync(emptyBooth.Id);
                await OnClosePopUp();
            }
        }
    }

    public async Task OnClosePopUp()
    {
        isVoterPopUpVisible = false;
        isLoading = true;
        currentVotingRecord = null;
        await InvokeAsync(StateHasChanged);
    }

    private void HandleRecordClick(VotingRecord record)
    {
        Console.WriteLine($"Clicked on: {record.Voter.FirstName} {record.Voter.LastName}");
        currentVotingRecord = record;
        isLoading = false;
        isVoterPopUpVisible = true;
    }


    private async void OnUserOnlineServiceChanged()
    {
        await InvokeAsync(StateHasChanged);
    }
    
    
}