@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client
@using PollingStationApp.Components.Shared
@using PollingStationApp.Data.Helpers.Abstractions
@using PollingStationApp.Models
@using PollingStationApp.Services
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject ITokenProvider TokenProvider
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IConfiguration Configuration
@inject SignalRService signalRService;

<div class="content">
    @if (isLoading)
    {
        <p><em>Așteptare cerere verificare...</em></p>
    }
    else if (currentVotingRecord != null && currentVotingRecord.Voter != null)
    {
        <VoterPopUp Voter="currentVotingRecord.Voter"></VoterPopUp>
        <p class="mt-2"><em>Alegător verificat: @currentVotingRecord.Voter.FirstName @currentVotingRecord.Voter.LastName</em></p>
    }
    else
    {
        <p>Nicio cerere înregistrată sau datele alegătorului nu au putut fi încărcate.</p>
    }
</div>

@code {
    private ClaimsPrincipal? _user;
    private HubConnection? hubConnection;
    private string exc;
    private RegisteredVoter Voter;
    private VotingRecord? currentVotingRecord;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        signalRService.OnVerifyVoterSignalReceived += HandleVerifiedVoterRecordAsync;

        try
        {
            await signalRService.InitializeAndRegisterAsync("2");
        }
        catch (Exception e)
        {
            exc = e.Message;
        }

    }
    public async Task HandleVerifiedVoterRecordAsync(VotingRecord record)
    {
        isLoading = true;
        currentVotingRecord = null; // Clear previous
        await InvokeAsync(StateHasChanged);


        Console.WriteLine($"Home page: Received OnVerifiedVoterRecord event for VoterId: {record.VoterId}");
        currentVotingRecord = record;

        // Ensure record.Voter is populated if VoterPopUp needs it directly.
        // If not, and VoterPopUp can take VotingRecord and extract Voter itself, that's fine.
        // If record.Voter is null here but should be populated, you might need an additional fetch
        // or ensure the server sends it populated.

        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    protected async void OnClick(EventArgs args)
    {
        Console.WriteLine("click event");
        exc = "click event";
        //var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        //_user = authState.User;
        //var token = await TokenProvider.GetAccessTokenAsync(_user);
        //Console.WriteLine($"Token: {token}");
        if(hubConnection!=null){
            exc = "invoked";
            await hubConnection.InvokeAsync("UnlockApp", "2", "1");
        }
    }
    
    
}