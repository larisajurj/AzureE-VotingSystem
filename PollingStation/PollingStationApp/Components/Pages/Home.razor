@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client
@using PollingStationApp.Components.Shared
@using PollingStationApp.Data.Helpers.Abstractions
@using PollingStationApp.Models
@using PollingStationApp.Services
@using PollingStationApp.Services.Abstractions
@using System.Text
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject ITokenProvider TokenProvider
@inject AuthenticationStateProvider authStateProvider
@inject IConfiguration Configuration
@inject SignalRService signalRService
@inject IUserOnlineService UserOnlineService
@inject IPollingStationClient pollingStationClient

<div class="content">
    @if (isLoading && (pendingRecords == null || !pendingRecords.Any()))
    {
        <p><em>Așteptare cerere verificare...</em></p>
    }
    else if (currentVotingRecord != null && currentVotingRecord.Voter != null)
    {
        @if (isVoterPopUpVisible)
        {
            <VoterPopUp Voter="currentVotingRecord.Voter"
            OnAllowVotingClicked="OnAllowVotingClicked"
            OnClosePopUp="OnClosePopUp"
            AssignedBoothNumber="@assignedBoothForPopup"
            Signature="@currentVotingRecord.Signature">
            </VoterPopUp>
            @if (errorMessage != null){
                <Row class="mt-3 justify-content-center">
                    <Column ColumnSize="ColumnSize.Is10">
                        <Alert Color="Color.Danger" Visible="true" class="text-center p-2">
                            <small>@errorMessage</small>
                        </Alert>
                    </Column>
                </Row>
            }

        }
    }
    else if (pendingRecords != null && pendingRecords.Any())
    {
        <div class="pending-voters-section mt-4">
            <h4>Alegători în Așteptare: @pendingRecords.Count() </h4>
            <ul class="list-group d-flex flex-row flex-wrap">
                @foreach (var record in pendingRecords.Take(5))
                {
                    <li class="list-group-item list-group-item-action me-2 mb-2" style="cursor: pointer;" @onclick="() => HandleRecordClick(record)">
                        @record.Voter.FirstName @record.Voter.LastName
                    </li>
                }
            </ul>
            @if (pendingRecords.Count() > 5)
            {
                <small class="text-muted"><em>Sunt afișați primii 5 din @pendingRecords.Count() alegători în așteptare.</em></small>
            }
        </div>
    }
    else
    {
        <p>Nicio cerere înregistrată sau datele alegătorului nu au putut fi încărcate.</p>
    }
</div>

@code {
    private VotingRecord? currentVotingRecord;
    private bool isLoading = true;
    private bool isVoterPopUpVisible = false;
    private List<VotingRecord>? pendingRecords;
    private string? assignedBoothForPopup; // Holds the assigned booth number for the popup
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        signalRService.OnVerifyVoterSignalReceived += HandleVerifiedVoterRecordAsync;
        UserOnlineService.OnChange += OnUserOnlineServiceChanged;
        assignedBoothForPopup = null;
        errorMessage = null;
        await UserOnlineService.InitializationComplete.Task;
        await UpdateStatus();

        var state = await authStateProvider.GetAuthenticationStateAsync();
        var user = state.User;
        if (UserOnlineService.PollingStation != null)
        {
            await signalRService.InitializeAndRegisterAsync(UserOnlineService.PollingStation.Id, user);
        }
    }

    public async Task HandleVerifiedVoterRecordAsync(VotingRecord record)
    {
        Console.WriteLine($"Home page: Received OnVerifiedVoterRecord event for VoterId: {record.VoterId}");
        currentVotingRecord = record;
        isVoterPopUpVisible = true;
        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnAllowVotingClicked(RegisteredVoter voterBeingAllowed)
    {
        if (UserOnlineService.PollingStation?.Id == null) return;

        var station = await pollingStationClient.GetStationById(UserOnlineService.PollingStation.Id);
        var emptyBooth = station?.Booths.FirstOrDefault(b => b.Status == "locked" && b.SessionId != null);

        if (emptyBooth != null && voterBeingAllowed?.Id != Guid.Empty)
        {
            await pollingStationClient.ChangeStatusOfRecord(voterBeingAllowed.Id, "Voted");
            await signalRService.RequestUnlockAppAsync(emptyBooth.Id);

            // Set the booth number to pass to the popup instead of closing it
            assignedBoothForPopup = emptyBooth.Id.ToString();
            await InvokeAsync(StateHasChanged);
        }else
        {
            errorMessage = "Nu există o cabină disponibilă. Vă rugăm așteptați ca o cabină să se elibereze. ";
        }
    }

    public async Task OnClosePopUp()
    {
        isVoterPopUpVisible = false;
        currentVotingRecord = null;
        assignedBoothForPopup = null; // Reset for the next voter
        await UpdateStatus();
    }

    private void HandleRecordClick(VotingRecord record)
    {
        currentVotingRecord = record;
        isLoading = false;
        isVoterPopUpVisible = true;
    }

    private async void OnUserOnlineServiceChanged() => await InvokeAsync(StateHasChanged);

    private async Task UpdateStatus()
    {
        if (UserOnlineService.CommitteeMember?.Id != null)
        {
            isLoading = true;
            assignedBoothForPopup = null;
            errorMessage = null;
            pendingRecords = await pollingStationClient.GetRecordsByStatus(UserOnlineService.CommitteeMember.Id, "Verified");
            var confirmed  = await pollingStationClient.GetRecordsByStatus(UserOnlineService.CommitteeMember.Id, "Confirmed");
            if (confirmed != null){
                if (pendingRecords == null)
                    pendingRecords = confirmed;
                else
                    pendingRecords.AddRange(confirmed);
            }
               
            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }
}