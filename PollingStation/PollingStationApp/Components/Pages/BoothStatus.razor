@page "/boothStatus"
@using PollingStationApp.Components.Shared
@using PollingStationApp.Models
@using PollingStationApp.Services.Abstractions
@rendermode InteractiveServer
@inject IUserOnlineService UserOnlineService
@inject IPollingStationClient PollingStationClient

<PageTitle>BoothStatus</PageTitle>

@if (pollingStation != null && pollingStation.Booths != null && pollingStation.Booths.Any())
{
    <div class="d-flex flex-wrap justify-content-center booth-container">
        @foreach (var booth in pollingStation.Booths.OrderBy(b => b.Id))
        {
            <BoothCard Booth="booth"/>
        }
    </div>
}
else if (isLoading)
{
    <p><em>Se încarcă informațiile cabinelor...</em></p>
}
else
{
    <p><em>Nicio cabină găsită pentru această secție de votare sau secția nu a putut fi încărcată.</em></p>
}

@code {
    private int currentCount = 0;
    private PollingStation? pollingStation;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        Console.WriteLine("OnInitializedAsync: Entered.");
        if (UserOnlineService == null)
        {
            Console.WriteLine("OnInitializedAsync: UserOnlineService is NULL at start.");
            return; // Or handle appropriately
        }
        Console.WriteLine($"BoothStatus using UserOnlineService [{UserOnlineService.InstanceId}]");

        Console.WriteLine("OnInitializedAsync: Awaiting UserOnlineService.InitializationComplete.Task...");
        await UserOnlineService.InitializationComplete.Task;
        Console.WriteLine("OnInitializedAsync: UserOnlineService.InitializationComplete.Task completed.");

        if (UserOnlineService.PollingStation != null && !string.IsNullOrEmpty(UserOnlineService.PollingStation.Id)) // Adjust to your actual ID property
        {
            Console.WriteLine($"OnInitializedAsync: Fetching station for ID: {UserOnlineService.PollingStation.Id}");
            pollingStation = await PollingStationClient.GetStationById(UserOnlineService.PollingStation.Id);
            if (pollingStation == null)
            {
                Console.WriteLine("OnInitializedAsync: PollingStationClient.GetStationById returned NULL.");
            }
            else
            {
                Console.WriteLine($"OnInitializedAsync: Fetched polling station: {pollingStation.Name}"); // Assuming a Name property
            }
        }
        else
        {
            Console.WriteLine("OnInitializedAsync: Condition to fetch polling station was false.");
            if (UserOnlineService.PollingStation == null) Console.WriteLine("Reason: UserOnlineService.PollingStation is null.");
            else Console.WriteLine($"Reason: UserOnlineService.PollingStation.Id is null or empty (Value: '{UserOnlineService.PollingStation.Id}').");
            pollingStation = null; // Ensure consistent state
        }
        // StateHasChanged(); // Often not needed if data is set before the method completes
        Console.WriteLine("OnInitializedAsync: Exiting.");
        isLoading = false;

    }


}
